#! /bin/sh
# $Header: $
#
#
#--------------------------------------------------------------------------------
# Copyright (c) 2008, Lawrence Livermore National Security, LLC. Produced at
# the Lawrence Livermore National Laboratory. Written by Dong H. Ahn <ahn1@llnl.gov>.
# LLNL-CODE-409469. All rights reserved.
#
# This file is part of LaunchMON. For details, see
# https://computing.llnl.gov/?set=resources&page=os_projects
#
# Please also read LICENSE -- Our Notice and GNU Lesser General Public License.
#
#
# This program is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License (as published by the Free Software
# Foundation) version 2.1 dated February 1999.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the terms and conditions of the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA
#--------------------------------------------------------------------------------
#
#  Attach the tool to a running program and unlock the hang.
#
#  Update Log:
#        May 04 2016 DHA: Add test in-tree and installed support
#        Oct 21 2011 DHA: Added dynamic RM detection support.
#        Jun 02 2009 DHA: Created file.
#

RM_TYPE=@TEST_RMTP@
NUMNODES=@NNODES@

if test "x$RM_TYPE" = "xRC_bgrm" ; then
  rm -f nohup.out
fi

NUMTASKS=`expr $NUMNODES \* @SMP@`
WAITAMOUNT=$NUMNODES
if test $NUMNODES -lt 20 ; then
  WAITAMOUNT=20
fi

SIGNUM=10
MPI_JOB_LAUNCHER_PATH=@TJLPATH@
export LMON_LAUNCHMON_ENGINE_PATH=@LMON@
if test "x@LMONPREFIX@" != "x0"; then
    export LMON_PREFIX=@LMONPREFIX@
else
    export LMON_RM_CONFIG_DIR=@RMCONFIGDIR@
    export LMON_COLOC_UTIL_DIR=@COLOCDIR@
fi
export LMON_STATUS_CB_TEST=1

if test "x$RM_TYPE" = "xRC_slurm" ; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH -n$NUMTASKS -N$NUMNODES -ppdebug `pwd`/hang_on_SIGUSR1@EXE@ &
elif test "x$RM_TYPE" = "xRC_bgqrm"; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH --verbose 4 --np $NUMTASKS --exe `pwd`/hang_on_SIGUSR1@EXE@ --cwd `pwd` --env-all &
elif test "x$RM_TYPE" = "xRC_bgq_slurm"; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH -N$NUMNODES -n $NUMTASKS `pwd`/hang_on_SIGUSR1@EXE@ &
elif test "x$RM_TYPE" = "xRC_alps" ; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH -n $NUMTASKS `pwd`/hang_on_SIGUSR1@EXE@ &
elif test "x$RM_TYPE" = "xRC_orte" ; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH -mca debugger mpirx -np $NUMTASKS `pwd`/hang_on_SIGUSR1@EXE@ &
elif test "x$RM_TYPE" = "xRC_mpiexec_hydra" ; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH -n $NUMTASKS `pwd`/hang_on_SIGUSR1@EXE@ &
elif test "x$RM_TYPE" = "xRC_ibm_spectrum" ; then
  WAITAMOUNT=`expr $WAITAMOUNT`
  $MPI_JOB_LAUNCHER_PATH -p $NUMTASKS `pwd`/hang_on_SIGUSR1@EXE@ &
else
  echo "This RM is not supported yet"
fi

PID=`echo $!`

sleep $WAITAMOUNT #wait until the job gets stalled

fe_attach_smoketest@EXE@ $PID `pwd`/be_kicker@EXE@ $SIGNUM

sleep $WAITAMOUNT

